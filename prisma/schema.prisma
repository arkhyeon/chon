generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 주소, 적립금
model User {
  uid           Int      @id @default(autoincrement())
  id            String   @unique
  username      String   @unique
  email         String   @unique
  password      String
  address       String
  addressDetail String
  point         Int      @default(0)
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 관계: 사용자가 좋아요한 제품
  likes     Like[]
  // 관계: 사용자의 장바구니
  cartItems CartItem[]
  Payment   Payment[]
}

enum UserRole {
  USER
  ADMIN
}

model Like {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [uid])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model CartItem {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [uid])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
}

// 비밀번호 리셋 등을 위한 토큰 저장 테이블
model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String // 예: passwordReset
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String   @default("")
  introduction String   @default("")
  price        Float
  imageUrl     String   @default("")
  stock        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 관계: 좋아요를 받은 사용자들
  likes    Like[]
  CartItem CartItem[]
}

// 관리자용 결제 관리 테이블
model Payment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [uid])
  userId    Int
  amount    Float
  currency  String   @default("USD")
  status    String // 예: "pending", "completed"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
