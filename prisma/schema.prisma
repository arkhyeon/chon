generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 주소, 적립금
model User {
  uid           Int      @id @default(autoincrement())
  id            String   @unique
  username      String   @unique
  email         String   @unique
  password      String
  address       String
  addressDetail String
  point         Int      @default(0)
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  likes          Like[]
  cartItems      CartItem[]
  paymentHistory PaymentHistory[]
  Question       Question[]
  Answer         Answer[]
}

enum UserRole {
  USER
  ADMIN
}

model Like {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [uid])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model CartItem {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [uid])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
}

// 비밀번호 리셋 등을 위한 토큰 저장 테이블
model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String // 예: passwordReset
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String   @default("")
  introduction String   @default("")
  price        Float
  imageUrl     String   @default("")
  stock        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 관계: 좋아요를 받은 사용자들
  likes          Like[]
  cartItem       CartItem[]
  paymentHistory PaymentHistory[]
}

model PaymentHistory {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [uid], references: [uid])
  uid             Int
  total           Int
  payment_status  String   @default("pending")
  delivery_status String   @default("processing")
  address         String
  address_detail  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  paymentList PaymentList[] // 1:N 관계 설정
  product     Product?      @relation(fields: [productId], references: [id])
  productId   Int?
}

model PaymentList {
  id             Int            @id @default(autoincrement())
  paymentHistory PaymentHistory @relation(fields: [pid], references: [id])
  pid            Int
  productName    String
  price          Int
  amount         Int
}

model Question {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  user       User     @relation(fields: [userId], references: [uid])
  userId     Int
  isAnswered Boolean  @default(false) // 질문에 답변이 있는지 여부
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  answers    Answer[] // 1:N 관계 (질문에 대한 여러 답변)
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String
  user       User     @relation(fields: [userId], references: [uid])
  userId     Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
